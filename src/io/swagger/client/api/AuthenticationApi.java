/*
 * production-studio API
 * This is a REST API application made with Express.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthenticationApi {
    private ApiClient __apiClient;

    public AuthenticationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationApi(ApiClient apiClient) {
        this.__apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return __apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.__apiClient = apiClient;
    }

    /**
     * Build call for authLogoutGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call authLogoutGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object __localVarPostBody = null;
        
        // create path and map variables
        String __localVarPath = "/auth/logout";

        List<Pair> __localVarQueryParams = new ArrayList<Pair>();
        List<Pair> __localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> __localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> __localVarFormParams = new HashMap<String, Object>();

        final String[] __localVarAccepts = {
            "application/json"
        };
        final String __localVarAccept = __apiClient.selectHeaderAccept(__localVarAccepts);
        if (__localVarAccept != null) __localVarHeaderParams.put("Accept", __localVarAccept);

        final String[] __localVarContentTypes = {
            
        };
        final String __localVarContentType = __apiClient.selectHeaderContentType(__localVarContentTypes);
        __localVarHeaderParams.put("Content-Type", __localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] __localVarAuthNames = new String[] {  };
        return __apiClient.buildCall(__localVarPath, "GET", __localVarQueryParams, __localVarCollectionQueryParams, __localVarPostBody, __localVarHeaderParams, __localVarFormParams, __localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authLogoutGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call __call = authLogoutGetCall(progressListener, progressRequestListener);
        return __call;

        
        
        
        
    }

    /**
     * /auth/logout
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void authLogoutGet() throws ApiException {
        authLogoutGetWithHttpInfo();
    }

    /**
     * /auth/logout
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> authLogoutGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call __call = authLogoutGetValidateBeforeCall(null, null);
        return __apiClient.execute(__call);
    }

    /**
     * /auth/logout (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authLogoutGetAsync(final ApiCallback<Void> __callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call __call = authLogoutGetValidateBeforeCall(progressListener, progressRequestListener);
        __apiClient.executeAsync(__call, __callback);
        return __call;
    }
    /**
     * Build call for authSigninPost
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call authSigninPostCall(Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object __localVarPostBody = body;
        
        // create path and map variables
        String __localVarPath = "/auth/signin";

        List<Pair> __localVarQueryParams = new ArrayList<Pair>();
        List<Pair> __localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> __localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> __localVarFormParams = new HashMap<String, Object>();

        final String[] __localVarAccepts = {
            "application/json"
        };
        final String __localVarAccept = __apiClient.selectHeaderAccept(__localVarAccepts);
        if (__localVarAccept != null) __localVarHeaderParams.put("Accept", __localVarAccept);

        final String[] __localVarContentTypes = {
            "application/json"
        };
        final String __localVarContentType = __apiClient.selectHeaderContentType(__localVarContentTypes);
        __localVarHeaderParams.put("Content-Type", __localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] __localVarAuthNames = new String[] {  };
        return __apiClient.buildCall(__localVarPath, "POST", __localVarQueryParams, __localVarCollectionQueryParams, __localVarPostBody, __localVarHeaderParams, __localVarFormParams, __localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authSigninPostValidateBeforeCall(Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call __call = authSigninPostCall(body, progressListener, progressRequestListener);
        return __call;

        
        
        
        
    }

    /**
     * auth/signin
     * 
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void authSigninPost(Object body) throws ApiException {
        authSigninPostWithHttpInfo(body);
    }

    /**
     * auth/signin
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> authSigninPostWithHttpInfo(Object body) throws ApiException {
        com.squareup.okhttp.Call __call = authSigninPostValidateBeforeCall(body, null, null);
        return __apiClient.execute(__call);
    }

    /**
     * auth/signin (asynchronously)
     * 
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authSigninPostAsync(Object body, final ApiCallback<Void> __callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call __call = authSigninPostValidateBeforeCall(body, progressListener, progressRequestListener);
        __apiClient.executeAsync(__call, __callback);
        return __call;
    }
    /**
     * Build call for authSignupPost
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call authSignupPostCall(Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object __localVarPostBody = body;
        
        // create path and map variables
        String __localVarPath = "/auth/signup";

        List<Pair> __localVarQueryParams = new ArrayList<Pair>();
        List<Pair> __localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> __localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> __localVarFormParams = new HashMap<String, Object>();

        final String[] __localVarAccepts = {
            "application/json"
        };
        final String __localVarAccept = __apiClient.selectHeaderAccept(__localVarAccepts);
        if (__localVarAccept != null) __localVarHeaderParams.put("Accept", __localVarAccept);

        final String[] __localVarContentTypes = {
            "application/json"
        };
        final String __localVarContentType = __apiClient.selectHeaderContentType(__localVarContentTypes);
        __localVarHeaderParams.put("Content-Type", __localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] __localVarAuthNames = new String[] {  };
        return __apiClient.buildCall(__localVarPath, "POST", __localVarQueryParams, __localVarCollectionQueryParams, __localVarPostBody, __localVarHeaderParams, __localVarFormParams, __localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authSignupPostValidateBeforeCall(Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call __call = authSignupPostCall(body, progressListener, progressRequestListener);
        return __call;

        
        
        
        
    }

    /**
     * /auth/signup
     * 
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void authSignupPost(Object body) throws ApiException {
        authSignupPostWithHttpInfo(body);
    }

    /**
     * /auth/signup
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> authSignupPostWithHttpInfo(Object body) throws ApiException {
        com.squareup.okhttp.Call __call = authSignupPostValidateBeforeCall(body, null, null);
        return __apiClient.execute(__call);
    }

    /**
     * /auth/signup (asynchronously)
     * 
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authSignupPostAsync(Object body, final ApiCallback<Void> __callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call __call = authSignupPostValidateBeforeCall(body, progressListener, progressRequestListener);
        __apiClient.executeAsync(__call, __callback);
        return __call;
    }
    /**
     * Build call for authUserGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call authUserGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object __localVarPostBody = null;
        
        // create path and map variables
        String __localVarPath = "/auth/user";

        List<Pair> __localVarQueryParams = new ArrayList<Pair>();
        List<Pair> __localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> __localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> __localVarFormParams = new HashMap<String, Object>();

        final String[] __localVarAccepts = {
            "application/json"
        };
        final String __localVarAccept = __apiClient.selectHeaderAccept(__localVarAccepts);
        if (__localVarAccept != null) __localVarHeaderParams.put("Accept", __localVarAccept);

        final String[] __localVarContentTypes = {
            
        };
        final String __localVarContentType = __apiClient.selectHeaderContentType(__localVarContentTypes);
        __localVarHeaderParams.put("Content-Type", __localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] __localVarAuthNames = new String[] {  };
        return __apiClient.buildCall(__localVarPath, "GET", __localVarQueryParams, __localVarCollectionQueryParams, __localVarPostBody, __localVarHeaderParams, __localVarFormParams, __localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authUserGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call __call = authUserGetCall(progressListener, progressRequestListener);
        return __call;

        
        
        
        
    }

    /**
     * /auth/user
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void authUserGet() throws ApiException {
        authUserGetWithHttpInfo();
    }

    /**
     * /auth/user
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> authUserGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call __call = authUserGetValidateBeforeCall(null, null);
        return __apiClient.execute(__call);
    }

    /**
     * /auth/user (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authUserGetAsync(final ApiCallback<Void> __callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call __call = authUserGetValidateBeforeCall(progressListener, progressRequestListener);
        __apiClient.executeAsync(__call, __callback);
        return __call;
    }
    /**
     * Build call for loggedGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call loggedGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object __localVarPostBody = null;
        
        // create path and map variables
        String __localVarPath = "/logged";

        List<Pair> __localVarQueryParams = new ArrayList<Pair>();
        List<Pair> __localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> __localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> __localVarFormParams = new HashMap<String, Object>();

        final String[] __localVarAccepts = {
            "application/json"
        };
        final String __localVarAccept = __apiClient.selectHeaderAccept(__localVarAccepts);
        if (__localVarAccept != null) __localVarHeaderParams.put("Accept", __localVarAccept);

        final String[] __localVarContentTypes = {
            
        };
        final String __localVarContentType = __apiClient.selectHeaderContentType(__localVarContentTypes);
        __localVarHeaderParams.put("Content-Type", __localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] __localVarAuthNames = new String[] {  };
        return __apiClient.buildCall(__localVarPath, "GET", __localVarQueryParams, __localVarCollectionQueryParams, __localVarPostBody, __localVarHeaderParams, __localVarFormParams, __localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call loggedGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call __call = loggedGetCall(progressListener, progressRequestListener);
        return __call;

        
        
        
        
    }

    /**
     * /logged
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void loggedGet() throws ApiException {
        loggedGetWithHttpInfo();
    }

    /**
     * /logged
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> loggedGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call __call = loggedGetValidateBeforeCall(null, null);
        return __apiClient.execute(__call);
    }

    /**
     * /logged (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call loggedGetAsync(final ApiCallback<Void> __callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call __call = loggedGetValidateBeforeCall(progressListener, progressRequestListener);
        __apiClient.executeAsync(__call, __callback);
        return __call;
    }
    /**
     * Build call for verificationEmailGet
     * @param email  (optional)
     * @param code  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call verificationEmailGetCall(String email, String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object __localVarPostBody = null;
        
        // create path and map variables
        String __localVarPath = "/verification/email";

        List<Pair> __localVarQueryParams = new ArrayList<Pair>();
        List<Pair> __localVarCollectionQueryParams = new ArrayList<Pair>();
        if (email != null)
        __localVarQueryParams.addAll(__apiClient.parameterToPair("email", email));
        if (code != null)
        __localVarQueryParams.addAll(__apiClient.parameterToPair("code", code));

        Map<String, String> __localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> __localVarFormParams = new HashMap<String, Object>();

        final String[] __localVarAccepts = {
            "application/json"
        };
        final String __localVarAccept = __apiClient.selectHeaderAccept(__localVarAccepts);
        if (__localVarAccept != null) __localVarHeaderParams.put("Accept", __localVarAccept);

        final String[] __localVarContentTypes = {
            
        };
        final String __localVarContentType = __apiClient.selectHeaderContentType(__localVarContentTypes);
        __localVarHeaderParams.put("Content-Type", __localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] __localVarAuthNames = new String[] {  };
        return __apiClient.buildCall(__localVarPath, "GET", __localVarQueryParams, __localVarCollectionQueryParams, __localVarPostBody, __localVarHeaderParams, __localVarFormParams, __localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call verificationEmailGetValidateBeforeCall(String email, String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call __call = verificationEmailGetCall(email, code, progressListener, progressRequestListener);
        return __call;

        
        
        
        
    }

    /**
     * /verification/email
     * 
     * @param email  (optional)
     * @param code  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void verificationEmailGet(String email, String code) throws ApiException {
        verificationEmailGetWithHttpInfo(email, code);
    }

    /**
     * /verification/email
     * 
     * @param email  (optional)
     * @param code  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> verificationEmailGetWithHttpInfo(String email, String code) throws ApiException {
        com.squareup.okhttp.Call __call = verificationEmailGetValidateBeforeCall(email, code, null, null);
        return __apiClient.execute(__call);
    }

    /**
     * /verification/email (asynchronously)
     * 
     * @param email  (optional)
     * @param code  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call verificationEmailGetAsync(String email, String code, final ApiCallback<Void> __callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call __call = verificationEmailGetValidateBeforeCall(email, code, progressListener, progressRequestListener);
        __apiClient.executeAsync(__call, __callback);
        return __call;
    }
    /**
     * Build call for verificationEmailPost
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call verificationEmailPostCall(Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object __localVarPostBody = body;
        
        // create path and map variables
        String __localVarPath = "/verification/email";

        List<Pair> __localVarQueryParams = new ArrayList<Pair>();
        List<Pair> __localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> __localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> __localVarFormParams = new HashMap<String, Object>();

        final String[] __localVarAccepts = {
            "application/json"
        };
        final String __localVarAccept = __apiClient.selectHeaderAccept(__localVarAccepts);
        if (__localVarAccept != null) __localVarHeaderParams.put("Accept", __localVarAccept);

        final String[] __localVarContentTypes = {
            "application/json"
        };
        final String __localVarContentType = __apiClient.selectHeaderContentType(__localVarContentTypes);
        __localVarHeaderParams.put("Content-Type", __localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] __localVarAuthNames = new String[] {  };
        return __apiClient.buildCall(__localVarPath, "POST", __localVarQueryParams, __localVarCollectionQueryParams, __localVarPostBody, __localVarHeaderParams, __localVarFormParams, __localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call verificationEmailPostValidateBeforeCall(Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call __call = verificationEmailPostCall(body, progressListener, progressRequestListener);
        return __call;

        
        
        
        
    }

    /**
     * /verification/email
     * 
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void verificationEmailPost(Object body) throws ApiException {
        verificationEmailPostWithHttpInfo(body);
    }

    /**
     * /verification/email
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> verificationEmailPostWithHttpInfo(Object body) throws ApiException {
        com.squareup.okhttp.Call __call = verificationEmailPostValidateBeforeCall(body, null, null);
        return __apiClient.execute(__call);
    }

    /**
     * /verification/email (asynchronously)
     * 
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call verificationEmailPostAsync(Object body, final ApiCallback<Void> __callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call __call = verificationEmailPostValidateBeforeCall(body, progressListener, progressRequestListener);
        __apiClient.executeAsync(__call, __callback);
        return __call;
    }
}
